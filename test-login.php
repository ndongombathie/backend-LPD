<?php

/**
 * Script de test pour v√©rifier la connexion avec UUID
 * Usage: php test-login.php
 */

require_once 'vendor/autoload.php';

use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

echo "üîê Test de Connexion avec UUID\n";
echo "==============================\n\n";

try {
    // V√©rifier la connexion √† la base de donn√©es
    echo "1Ô∏è‚É£ V√©rification de la connexion √† la base de donn√©es...\n";
    DB::connection()->getPdo();
    echo "‚úÖ Connexion √† la base de donn√©es r√©ussie\n\n";

    // V√©rifier les utilisateurs cr√©√©s
    echo "2Ô∏è‚É£ V√©rification des utilisateurs...\n";
    $users = User::all();
    echo "üë• Utilisateurs trouv√©s: " . $users->count() . "\n";
    
    foreach ($users as $user) {
        $isUuid = preg_match('/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i', $user->id);
        $status = $isUuid ? "‚úÖ UUID valide" : "‚ùå UUID invalide";
        echo "   - {$user->name} ({$user->email}): {$status}\n";
    }

    // Test de connexion avec l'admin
    echo "\n3Ô∏è‚É£ Test de connexion avec l'administrateur...\n";
    $admin = User::where('email', 'admin@stockmanagement.com')->first();
    
    if ($admin) {
        echo "‚úÖ Administrateur trouv√©: {$admin->name}\n";
        echo "   - ID: {$admin->id}\n";
        echo "   - Email: {$admin->email}\n";
        echo "   - R√¥le: {$admin->role}\n";
        
        // V√©rifier le mot de passe
        if (Hash::check('password', $admin->password)) {
            echo "‚úÖ Mot de passe valide\n";
        } else {
            echo "‚ùå Mot de passe invalide\n";
        }
    } else {
        echo "‚ùå Administrateur non trouv√©\n";
    }

    // Test de connexion avec un vendeur
    echo "\n4Ô∏è‚É£ Test de connexion avec un vendeur...\n";
    $seller = User::where('role', 'seller')->first();
    
    if ($seller) {
        echo "‚úÖ Vendeur trouv√©: {$seller->name}\n";
        echo "   - ID: {$seller->id}\n";
        echo "   - Email: {$seller->email}\n";
        echo "   - Boutique: " . ($seller->store ? $seller->store->name : 'Aucune') . "\n";
        
        // V√©rifier le mot de passe
        if (Hash::check('password', $seller->password)) {
            echo "‚úÖ Mot de passe valide\n";
        } else {
            echo "‚ùå Mot de passe invalide\n";
        }
    } else {
        echo "‚ùå Aucun vendeur trouv√©\n";
    }

    // Test de cr√©ation de token
    echo "\n5Ô∏è‚É£ Test de cr√©ation de token...\n";
    if ($admin) {
        try {
            $token = $admin->createToken('test-token')->plainTextToken;
            echo "‚úÖ Token cr√©√© avec succ√®s\n";
            echo "   - Token: " . substr($token, 0, 20) . "...\n";
            echo "   - Tokenable ID: {$admin->id}\n";
            echo "   - Tokenable Type: " . get_class($admin) . "\n";
        } catch (Exception $e) {
            echo "‚ùå Erreur lors de la cr√©ation du token: " . $e->getMessage() . "\n";
        }
    }

    // Test des relations
    echo "\n6Ô∏è‚É£ Test des relations...\n";
    $userWithStore = User::with('store')->whereNotNull('store_id')->first();
    if ($userWithStore) {
        echo "‚úÖ Relation User->Store fonctionne\n";
        echo "   - Utilisateur: {$userWithStore->name}\n";
        echo "   - Boutique: {$userWithStore->store->name}\n";
    }

    echo "\nüéâ Test de connexion termin√© avec succ√®s!\n";
    echo "Le syst√®me est pr√™t pour les connexions avec UUID.\n\n";

    echo "üìã Comptes de test disponibles:\n";
    echo "   - Admin: admin@stockmanagement.com / password\n";
    echo "   - Vendeurs: seller@[boutique].com / password\n";
    echo "   - Caissiers: cashier@[boutique].com / password\n";
    echo "   - Gestionnaires: manager@[boutique].com / password\n";

} catch (Exception $e) {
    echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    echo "V√©rifiez votre configuration de base de donn√©es.\n";
    exit(1);
}
