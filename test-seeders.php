<?php

/**
 * Script de test pour v√©rifier les seeders
 * Usage: php test-seeders.php
 */

require_once 'vendor/autoload.php';

use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;

echo "üß™ Test des Seeders - Syst√®me de Gestion de Stock\n";
echo "================================================\n\n";

try {
    // V√©rifier la connexion √† la base de donn√©es
    echo "1Ô∏è‚É£ V√©rification de la connexion √† la base de donn√©es...\n";
    DB::connection()->getPdo();
    echo "‚úÖ Connexion √† la base de donn√©es r√©ussie\n\n";

    // Ex√©cuter les migrations
    echo "2Ô∏è‚É£ Ex√©cution des migrations...\n";
    Artisan::call('migrate:fresh');
    echo "‚úÖ Migrations ex√©cut√©es avec succ√®s\n\n";

    // Ex√©cuter les seeders
    echo "3Ô∏è‚É£ Ex√©cution des seeders...\n";
    Artisan::call('db:seed');
    echo "‚úÖ Seeders ex√©cut√©s avec succ√®s\n\n";

    // V√©rifier les donn√©es cr√©√©es
    echo "4Ô∏è‚É£ V√©rification des donn√©es cr√©√©es...\n";
    
    $stores = DB::table('stores')->count();
    $categories = DB::table('categories')->count();
    $users = DB::table('users')->count();
    $products = DB::table('products')->count();
    $orders = DB::table('orders')->count();
    $payments = DB::table('payments')->count();

    echo "üìä R√©sultats:\n";
    echo "   - Boutiques: {$stores}\n";
    echo "   - Cat√©gories: {$categories}\n";
    echo "   - Utilisateurs: {$users}\n";
    echo "   - Produits: {$products}\n";
    echo "   - Commandes: {$orders}\n";
    echo "   - Paiements: {$payments}\n\n";

    // V√©rifier les relations
    echo "5Ô∏è‚É£ V√©rification des relations...\n";
    
    $productsWithStore = DB::table('products')
        ->join('stores', 'products.store_id', '=', 'stores.id')
        ->count();
    
    $productsWithCategory = DB::table('products')
        ->join('categories', 'products.category_id', '=', 'categories.id')
        ->count();
    
    $ordersWithStore = DB::table('orders')
        ->join('stores', 'orders.store_id', '=', 'stores.id')
        ->count();

    echo "‚úÖ Relations v√©rifi√©es:\n";
    echo "   - Produits avec boutique: {$productsWithStore}\n";
    echo "   - Produits avec cat√©gorie: {$productsWithCategory}\n";
    echo "   - Commandes avec boutique: {$ordersWithStore}\n\n";

    // Statistiques d√©taill√©es
    echo "6Ô∏è‚É£ Statistiques d√©taill√©es...\n";
    
    // Produits par boutique
    $productsByStore = DB::table('products')
        ->join('stores', 'products.store_id', '=', 'stores.id')
        ->select('stores.name', DB::raw('COUNT(products.id) as product_count'))
        ->groupBy('stores.id', 'stores.name')
        ->get();

    echo "üì¶ Produits par boutique:\n";
    foreach ($productsByStore as $store) {
        echo "   - {$store->name}: {$store->product_count} produits\n";
    }

    // Produits par cat√©gorie
    $productsByCategory = DB::table('products')
        ->join('categories', 'products.category_id', '=', 'categories.id')
        ->select('categories.name', DB::raw('COUNT(products.id) as product_count'))
        ->groupBy('categories.id', 'categories.name')
        ->get();

    echo "\nüìÇ Produits par cat√©gorie:\n";
    foreach ($productsByCategory as $category) {
        echo "   - {$category->name}: {$category->product_count} produits\n";
    }

    // Commandes par statut
    $ordersByStatus = DB::table('orders')
        ->select('status', DB::raw('COUNT(*) as count'))
        ->groupBy('status')
        ->get();

    echo "\nüõí Commandes par statut:\n";
    foreach ($ordersByStatus as $status) {
        echo "   - {$status->status}: {$status->count} commandes\n";
    }

    // Paiements par m√©thode
    $paymentsByMethod = DB::table('payments')
        ->select('payment_method', DB::raw('COUNT(*) as count'))
        ->groupBy('payment_method')
        ->get();

    echo "\nüí≥ Paiements par m√©thode:\n";
    foreach ($paymentsByMethod as $method) {
        echo "   - {$method->payment_method}: {$method->count} paiements\n";
    }

    echo "\nüéâ Test termin√© avec succ√®s!\n";
    echo "Le syst√®me est pr√™t √† √™tre utilis√©.\n\n";

    echo "üìã Prochaines √©tapes:\n";
    echo "1. D√©marrer le serveur: php artisan serve\n";
    echo "2. Tester l'API avec Postman ou curl\n";
    echo "3. Ouvrir realtime-test.html pour tester les notifications\n";
    echo "4. Utiliser les comptes de test cr√©√©s\n\n";

    echo "üë• Comptes de test cr√©√©s:\n";
    echo "   - Admin: admin@stockmanagement.com / password\n";
    echo "   - Vendeurs: seller@[boutique].com / password\n";
    echo "   - Caissiers: cashier@[boutique].com / password\n";
    echo "   - Gestionnaires: manager@[boutique].com / password\n";

} catch (Exception $e) {
    echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    echo "V√©rifiez votre configuration de base de donn√©es.\n";
    exit(1);
}
